				Notes

* DONE Tool support for writing JUnit tests
** DONE http://junit.sourceforge.net/doc/faq/faq.htm#organize_1
** DONE generic makefile (including unit tests building) - http://www.makelinux.net/make3/make3-CHP-9-SECT-2
** DONE Have proper DRY makefile rules for building and running the unit tests
** DONE ditto - http://comsci.liu.edu/~league/dist/rngzip/trunk/Makefile
** DONE tutorial - http://www.vogella.com/articles/JUnit/article.html
** VVIP I'm making the .class files for the unit tests go in classes/tests/. This means I'm compiling source files and test files separately because AFAIK you can only supply one -d (output dir) during compilation.
** I got hamcrest related NoClassDefFoundError so I added it to the classpath
* DONE Migrate Google elisp code for dealing with Java coding.
* DONE Unit Tests
* DONE Bug in Makefile
** DONE TransactionOperationTest is not able to import mutexlamport.TimeStamp
*** Damn! I was importing Timestamp instead of TimeStamp (hung by my own autocompletion)
* Integration Tests
* JDEE
* DONE Have manual and script-based trigger - Get event list from a file
  CLOCK: [2012-09-13 Thu 14:42]--[2012-09-13 Thu 14:45] =>  0:03
** DONE First, print out ALL events.
   CLOCK: [2012-09-13 Thu 14:45]--[2012-09-13 Thu 15:04] =>  0:19
** DONE Have a program given as input to each node consisting of
   CLOCK: [2012-09-13 Thu 15:05]--[2012-09-13 Thu 16:22] =>  1:17
*** Reads (which will just be dummy events) and
*** Writes (actual file writes)
** DONE Not needed - Write a Python script to parse the output and check for correctness
** DONE Turns out I don't need the script after all. All the conditions are met by the code.
*** DONE Test for correctness in each nodes event list - own request
**** DONE between request and write, there should be N - 1 ACKs.
***** Checked by the code
**** DONE In the event just before the write, node should be at the head its queue.
***** Checked by the code
**** DONE There are 3 releases after the write without another request from node
***** cos it's a broadcast
**** DONE In the request queue after the write, the write request has been removed.
*** DONE Other people's requests
**** DONE received request => request is now in the request queue
**** DONE received release => request is no longer in the request queue
* DONE Bootstrap code - Centralized server
** DONE Refactor the pre-startExecution code
   CLOCK: [2012-11-14 Wed 00:30]--[2012-11-14 Wed 00:55] =>  0:25
   CLOCK: [2012-11-13 Tue 20:02]--[2012-11-13 Tue 21:09] =>  1:07
** DONE Bootstrap server
   CLOCK: [2012-11-14 Wed 01:51]--[2012-11-14 Wed 02:04] =>  0:13
   CLOCK: [2012-11-14 Wed 01:09]--[2012-11-14 Wed 01:51] =>  0:42
** DONE Print messages
** Get list of peers, etc. from the Bootstrap server wonly.
* TODO Transactions (R + W)
** DONE Serializability - Transaction - Read and Write with Lamport TS
*** Data Item
    CLOCK: [2012-11-14 Wed 17:37]--[2012-11-14 Wed 17:49] =>  0:12
*** x on one node, y on another
*** DONE List of (Transaction ID, Operation) as input
    CLOCK: [2012-11-14 Wed 19:12]--[2012-11-14 Wed 19:56] =>  0:44
*** DONE In every iteration of your while loop, keep trying to execute the operation
    CLOCK: [2012-11-14 Wed 21:57]--[2012-11-14 Wed 23:25] =>  1:28
**** DONE Stuck at making TransactionOperation work with TS string, operationString as constructor arguments.
*** DONE Wait for the Ack after each operation
** DONE Algo
   CLOCK: [2012-11-28 Wed 03:33]--[2012-11-28 Wed 05:41] =>  2:08
   CLOCK: [2012-11-28 Wed 00:04]--[2012-11-28 Wed 02:18] =>  2:14
*** Loop
**** DONE Send operation requests for a transaction
**** DONE Wait for each ack
***** DONE Ack READ [SUCCESS | FAIL] from PID VAL
***** DONE Ack WRITE [SUCCESS | FAIL] from PID
***** DONE Yeah... subclass MutexMessage
**** DONE If rejected, restart the transaction
***** DONE Remove timestamp from transactionTimeStampHash
**** Requests from other nodes
***** DONE execute Operation (data item)
***** DONE Send ack with the success or failure info
** DONE Data item: have a list of all the completed reads and writes
*** Problem: This includes ok operations of Transactions that were later restarted.
** DONE Data Item time stamps
*** DONE RTM
*** DONE WTM
*** DONE canRead
*** DONE canWrite
** TODO Prewrite buffer, etc. at each data item - no replication
*** TODO Have a loop where you go over the data items and execute buffered Reads and Writes
* TODO Design it such that you execute at the Transaction level instead of at the Operation level
** This seems to be the biggest problem I have at the moment.
* TODO Optimistic Concurrency Control - R and W TS with full replication
